{"version":3,"sources":["CurrencyInput.js","App.js","reportWebVitals.js","index.js"],"names":["CurrencyInput","props","className","type","value","amount","onChange","ev","onAmountChange","target","currency","onCurrencyChange","currencies","map","App","useState","amount1","setAmount1","amount2","setAmount2","currency1","setCurrency1","currency2","setCurrency2","rates","setRates","format","number","toFixed","handleAmount1Change","useEffect","axios","get","then","response","data","Object","keys","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAwBeA,MArBf,SAAuBC,GACrB,OACE,sBAAKC,UAAU,QAAf,UACE,uBAAOC,KAAK,OAAOC,MAAOH,EAAMI,OAAQC,SAAU,SAAAC,GAAE,OAAIN,EAAMO,eAAeD,EAAGE,OAAOL,UACvF,wBAAQA,MAAOH,EAAMS,SAAUJ,SAAU,SAAAC,GAAE,OAAIN,EAAMU,iBAAiBJ,EAAGE,OAAOL,QAAhF,SACGH,EAAMW,WAAWC,KAAK,SAAAH,GAAQ,OAC7B,wBAAQN,MAAOM,EAAf,SAA0BA,a,iBCkErBI,MAtEf,WAAgB,IAAD,EAEiBC,mBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGiBF,mBAAS,GAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIqBJ,mBAAS,OAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKqBN,mBAAS,OAL9B,mBAKNO,EALM,KAKKC,EALL,OAMaR,mBAAS,IANtB,mBAMNS,EANM,KAMCC,EAND,KA0Bb,SAASC,EAAOC,GACd,OAAOA,EAAOC,QAAQ,GAGxB,SAASC,EAAoBb,GAC3BG,EAAWO,EAAOV,EAAUQ,EAAMF,GAAaE,EAAMJ,KACrDH,EAAWD,GAmBb,OA3CAc,qBAAU,WACRC,IAAMC,IAAI,+EACPC,MAAK,SAAAC,GACJT,EAASS,EAASC,KAAKX,YAE1B,IAEHM,qBAAU,WACR,GAAMN,EAAO,CAETK,EAAoB,MAIvB,CAACL,IA8BF,gCACE,oDACA,cAAC,EAAD,CACEhB,eAAgBqB,EAChBlB,iBArBN,SAA+BS,GAC7BD,EAAWO,EAAOV,EAAUQ,EAAMF,GAAaE,EAAMJ,KACrDC,EAAaD,IAoBTR,WAAYwB,OAAOC,KAAKb,GACxBnB,OAAQW,EACRN,SAAUU,IACZ,cAAC,EAAD,CACEZ,eArBN,SAA6BU,GAC3BD,EAAWS,EAAOR,EAAUM,EAAMJ,GAAaI,EAAMF,KACrDH,EAAWD,IAoBPP,iBAjBN,SAA+BW,GAC7BL,EAAWS,EAAOR,EAAUM,EAAMJ,GAAaI,EAAMF,KACrDC,EAAaD,IAgBTV,WAAYwB,OAAOC,KAAKb,GACxBnB,OAAQa,EACRR,SAAUY,QC1DHgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5c75b24.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport './currencyInput.css';\r\n\r\nfunction CurrencyInput(props) {\r\n  return (\r\n    <div className=\"group\">\r\n      <input type=\"text\" value={props.amount} onChange={ev => props.onAmountChange(ev.target.value)} />\r\n      <select value={props.currency} onChange={ev => props.onCurrencyChange(ev.target.value)}>\r\n        {props.currencies.map((currency => (\r\n          <option value={currency}>{currency}</option>\r\n        )))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nCurrencyInput.propTypes = {\r\n  amount: PropTypes.number.isRequired,\r\n  currency: PropTypes.string.isRequired,\r\n  currencies: PropTypes.array,\r\n  onAmountChange: PropTypes.func,\r\n  onCurrencyChange: PropTypes.func,\r\n};\r\n\r\nexport default CurrencyInput;","import './App.css';\r\nimport CurrencyInput from \"./CurrencyInput\";\r\nimport {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n\r\n  const [amount1, setAmount1] = useState(1);\r\n  const [amount2, setAmount2] = useState(1);\r\n  const [currency1, setCurrency1] = useState('USD');\r\n  const [currency2, setCurrency2] = useState('EUR');\r\n  const [rates, setRates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://data.fixer.io/api/latest?access_key=a650c99ac39f4c8ed220878bcaf8d603')\r\n      .then(response => {\r\n        setRates(response.data.rates);\r\n      })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!!rates) {\r\n      function init() {\r\n        handleAmount1Change(1);\r\n      }\r\n      init();\r\n    }\r\n  }, [rates]);\r\n\r\n\r\n\r\n  function format(number) {\r\n    return number.toFixed(4);\r\n  }\r\n\r\n  function handleAmount1Change(amount1) {\r\n    setAmount2(format(amount1 * rates[currency2] / rates[currency1]));\r\n    setAmount1(amount1);\r\n  }\r\n\r\n  function handleCurrency1Change(currency1) {\r\n    setAmount2(format(amount1 * rates[currency2] / rates[currency1]));\r\n    setCurrency1(currency1);\r\n  }\r\n\r\n  function handleAmount2Change(amount2) {\r\n    setAmount1(format(amount2 * rates[currency1] / rates[currency2]));\r\n    setAmount2(amount2);\r\n  }\r\n\r\n  function handleCurrency2Change(currency2) {\r\n    setAmount1(format(amount2 * rates[currency1] / rates[currency2]));\r\n    setCurrency2(currency2);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Currency Converter</h1>\r\n      <CurrencyInput\r\n        onAmountChange={handleAmount1Change}\r\n        onCurrencyChange={handleCurrency1Change}\r\n        currencies={Object.keys(rates)}\r\n        amount={amount1}\r\n        currency={currency1} />\r\n      <CurrencyInput\r\n        onAmountChange={handleAmount2Change}\r\n        onCurrencyChange={handleCurrency2Change}\r\n        currencies={Object.keys(rates)}\r\n        amount={amount2}\r\n        currency={currency2} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}